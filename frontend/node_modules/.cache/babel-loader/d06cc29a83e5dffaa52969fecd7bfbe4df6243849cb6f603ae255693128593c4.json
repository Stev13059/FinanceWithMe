{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { groups_list, savingGoals_list, savingGoals_add, savingGoals_delete, savingGoals_edit, transaction_add } from '@/api/api';\nimport Modal from './components/Modal';\nexport default {\n  name: 'GoalsPage',\n  components: {\n    Modal\n  },\n  data() {\n    return {\n      delId: -1,\n      delLoading: false,\n      goalsList: [],\n      currentAmountIndex: 0,\n      tabGroupData: [],\n      visible: false,\n      form: this.$form.createForm(this, {\n        name: 'coordinated'\n      }),\n      typeIcon: {\n        Food: 'coffee',\n        Transport: 'car',\n        Healthcare: 'medicine-box',\n        Education: 'read',\n        Shopping: 'shopping-cart',\n        Entertainment: 'customer-service',\n        Bill: 'transaction',\n        Other: 'gateway'\n      }\n    };\n  },\n  methods: {\n    getGroupData() {\n      groups_list().then(res => {\n        this.tabGroupData = [{\n          id: '',\n          name: 'Personal',\n          selected: true\n        }, ...res.data.map(m => ({\n          id: m.id,\n          name: m.groupName,\n          selected: false\n        }))];\n        this.getDataList();\n      });\n    },\n    changeTab(item) {\n      this.tabGroupData.forEach(el => {\n        el.selected = item.id === el.id;\n      });\n      this.getDataList();\n    },\n    getDataList() {\n      const params = {};\n      const gId = this.tabGroupData.find(f => f.selected).id;\n      if (gId) {\n        params.groupId = gId;\n      }\n      savingGoals_list(params).then(res => {\n        this.goalsList = res.data.map(m => ({\n          ...m,\n          progressPercentage: parseFloat(parseFloat(m.currentAmount / m.targetAmount * 100).toFixed(2))\n        }));\n      });\n    },\n    addGoals(data) {\n      this.$refs.drawerRef.btnLoading = true;\n      savingGoals_add({\n        ...data,\n        currentAmount: 0,\n        groupId: this.tabGroupData.find(f => f.selected).id\n      }).then(() => {\n        this.$message.success('Adding savinggoals for success！');\n        this.$refs.drawerRef.visible = false;\n        this.$refs.drawerRef.form.resetFields();\n        this.getDataList();\n      }).finally(() => {\n        this.$refs.drawerRef.btnLoading = false;\n      });\n    },\n    editGoals(data) {\n      this.$refs.drawerRef.btnLoading = true;\n      savingGoals_edit({\n        ...data,\n        currentAmount: this.goalsList[this.currentAmountIndex].currentAmount\n      }).then(() => {\n        this.$message.success('Editing savinggoals for success！');\n        this.$refs.drawerRef.visible = false;\n        this.$refs.drawerRef.form.resetFields();\n        this.getDataList();\n      }).finally(() => {\n        this.$refs.drawerRef.btnLoading = false;\n      });\n    },\n    onEditGoals(row, index) {\n      this.currentAmountIndex = index;\n      this.$refs.drawerRef.visible = true;\n      Object.assign(this.$refs.drawerRef.formData, JSON.parse(JSON.stringify(row)));\n      this.$nextTick(() => {\n        this.$refs.drawerRef.form.setFieldsValue(this.$refs.drawerRef.formData);\n      });\n    },\n    addOpenModal() {\n      this.$refs.drawerRef.visible = true;\n    },\n    onDelete(id) {\n      this.$confirm({\n        title: 'Do you want to delete this goals?',\n        content: 'Cannot be restored after deletion',\n        onOk: () => {\n          this.delLoading = true;\n          this.delId = id;\n          savingGoals_delete({\n            id\n          }).then(() => {\n            this.$message.success('Deleting savinggoals for success！');\n            this.getDataList();\n          }).finally(() => {\n            this.delLoading = false;\n          });\n        },\n        onCancel() {}\n      });\n    },\n    addCurrentAmount() {\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          const _data = this.goalsList[this.currentAmountIndex];\n          const params = {\n            ..._data,\n            currentAmount: parseFloat(_data.currentAmount) + parseFloat(values.currentAmount)\n          };\n          savingGoals_edit(params).then(() => {\n            this.$message.success('Add amount success！');\n            this.getDataList();\n            this.visible = false;\n            this.form.resetFields();\n            let date = new Date();\n            let day = date.getDate();\n            let month = date.getMonth() + 1;\n            let year = date.getFullYear();\n            let ukFormat = `${day}/${month}/${year}`;\n            transaction_add({\n              date: ukFormat,\n              type: _data.type,\n              name: _data.goalName,\n              amount: parseFloat(values.currentAmount),\n              groupId: _data.groupId,\n              transactionType: 2,\n              goalId: _data.id\n            });\n          }).finally(() => {});\n        }\n      });\n    },\n    onClose() {\n      this.visible = false;\n      this.form.resetFields();\n    }\n  },\n  mounted() {\n    this.getGroupData();\n  }\n};","map":{"version":3,"names":["groups_list","savingGoals_list","savingGoals_add","savingGoals_delete","savingGoals_edit","transaction_add","Modal","name","components","data","delId","delLoading","goalsList","currentAmountIndex","tabGroupData","visible","form","$form","createForm","typeIcon","Food","Transport","Healthcare","Education","Shopping","Entertainment","Bill","Other","methods","getGroupData","then","res","id","selected","map","m","groupName","getDataList","changeTab","item","forEach","el","params","gId","find","f","groupId","progressPercentage","parseFloat","currentAmount","targetAmount","toFixed","addGoals","$refs","drawerRef","btnLoading","$message","success","resetFields","finally","editGoals","onEditGoals","row","index","Object","assign","formData","JSON","parse","stringify","$nextTick","setFieldsValue","addOpenModal","onDelete","$confirm","title","content","onOk","onCancel","addCurrentAmount","validateFields","err","values","_data","date","Date","day","getDate","month","getMonth","year","getFullYear","ukFormat","type","goalName","amount","transactionType","goalId","onClose","mounted"],"sources":["src/views/savingGoals/index.vue"],"sourcesContent":["<template>\r\n  <div style=\"display:flex;flex-direction: column;\">\r\n    <TabBtn :tabData=\"tabGroupData\" @changeTab=\"changeTab\"></TabBtn>\r\n    <a-button icon=\"plus\" size=\"large\" type=\"primary\" style=\"align-self: flex-end;margin:20px\"\r\n      @click=\"addOpenModal\">Create</a-button>\r\n    <a-empty v-if=\"goalsList.length === 0\"/>\r\n    <div class=\"cardBox\">\r\n      <a-card v-for=\"(item, index) in goalsList\" :key=\"index\">\r\n        <div class=\"card_header\">\r\n          <a-icon :type=\"typeIcon[item.type]\" />\r\n          <span>{{ item.goalName }}</span>\r\n          <a-icon type=\"plus-circle\" style=\"cursor: pointer;\" @click=\"visible = true; currentAmountIndex = index\" />\r\n        </div>\r\n        <div class=\"card_date\">\r\n          <div class=\"money_date\">\r\n            <div>{{ item.targetAmount }} £</div>\r\n            <div>{{ item.currentAmount }} £</div>\r\n          </div>\r\n          <div style=\"padding-right: 10px\">\r\n            <a-progress :percent=\"item.progressPercentage\" />\r\n          </div>\r\n        </div>\r\n        <div class=\"card_btn\">\r\n          <a-button size=\"large\" @click=\"onEditGoals(item, index)\">Edit</a-button>\r\n          <a-button type=\"danger\" :loading=\"delLoading && delId == item.id\" size=\"large\" @click=\"onDelete(item.id)\">Delete</a-button>\r\n        </div>\r\n      </a-card>\r\n    </div>\r\n\r\n    <a-modal title=\"Current Amount\" v-model=\"visible\" @ok=\"addCurrentAmount\" @close=\"onClose\">\r\n      <a-form :form=\"form\" :label-col=\"{ span: 6 }\" :wrapper-col=\"{ span: 18 }\">\r\n        <a-form-item label=\"Deposit\">\r\n          <a-input placeholder=\"\" type=\"number\"\r\n            v-decorator=\"['currentAmount', { rules: [{ required: true, message: 'Please input your currentAmount!' }] }]\"></a-input>\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <Modal ref=\"drawerRef\" @addGoals=\"addGoals\" @editGoals=\"editGoals\"></Modal>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { groups_list, savingGoals_list, savingGoals_add, savingGoals_delete, savingGoals_edit, transaction_add } from '@/api/api'\r\nimport Modal from './components/Modal'\r\nexport default {\r\n  name: 'GoalsPage',\r\n  components: { Modal },\r\n  data() {\r\n    return {\r\n      delId: -1,\r\n      delLoading: false,\r\n      goalsList: [],\r\n      currentAmountIndex: 0,\r\n      tabGroupData: [],\r\n      visible: false,\r\n      form: this.$form.createForm(this, { name: 'coordinated' }),\r\n      typeIcon: {\r\n        Food: 'coffee',\r\n        Transport: 'car',\r\n        Healthcare: 'medicine-box',\r\n        Education: 'read',\r\n        Shopping: 'shopping-cart',\r\n        Entertainment: 'customer-service',\r\n        Bill: 'transaction',\r\n        Other: 'gateway'\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    getGroupData() {\r\n      groups_list().then((res) => {\r\n        this.tabGroupData = [\r\n          {\r\n            id: '',\r\n            name: 'Personal',\r\n            selected: true\r\n          },\r\n          ...res.data.map(m => ({\r\n            id: m.id,\r\n            name: m.groupName,\r\n            selected: false\r\n          }))\r\n        ]\r\n        this.getDataList()\r\n      })\r\n    },\r\n    changeTab(item) {\r\n      this.tabGroupData.forEach(el => {\r\n        el.selected = item.id === el.id\r\n      })\r\n      this.getDataList()\r\n    },\r\n    getDataList() {\r\n      const params = {}\r\n      const gId = this.tabGroupData.find(f => f.selected).id\r\n      if (gId) {\r\n        params.groupId = gId\r\n      }\r\n      savingGoals_list(params).then((res) => {\r\n        this.goalsList = res.data.map(m => ({\r\n          ...m,\r\n          progressPercentage: parseFloat(parseFloat((m.currentAmount / m.targetAmount) * 100).toFixed(2)),\r\n        }))\r\n      })\r\n    },\r\n    addGoals(data) {\r\n      this.$refs.drawerRef.btnLoading = true\r\n      savingGoals_add({ ...data, currentAmount: 0, groupId: this.tabGroupData.find(f => f.selected).id }).then(() => {\r\n        this.$message.success('Adding savinggoals for success！')\r\n        this.$refs.drawerRef.visible = false\r\n        this.$refs.drawerRef.form.resetFields()\r\n        this.getDataList()\r\n      }).finally(() => {\r\n        this.$refs.drawerRef.btnLoading = false\r\n      })\r\n    },\r\n    editGoals(data) {\r\n      this.$refs.drawerRef.btnLoading = true\r\n      savingGoals_edit({\r\n        ...data,\r\n        currentAmount: this.goalsList[this.currentAmountIndex].currentAmount,\r\n      })\r\n        .then(() => {\r\n          this.$message.success('Editing savinggoals for success！')\r\n          this.$refs.drawerRef.visible = false\r\n          this.$refs.drawerRef.form.resetFields()\r\n          this.getDataList()\r\n        }).finally(() => {\r\n          this.$refs.drawerRef.btnLoading = false\r\n        })\r\n    },\r\n    onEditGoals(row, index) {\r\n      this.currentAmountIndex = index\r\n      this.$refs.drawerRef.visible = true\r\n      Object.assign(this.$refs.drawerRef.formData, JSON.parse(JSON.stringify(row)))\r\n      this.$nextTick(() => {\r\n        this.$refs.drawerRef.form.setFieldsValue(this.$refs.drawerRef.formData)\r\n      })\r\n    },\r\n    addOpenModal() {\r\n      this.$refs.drawerRef.visible = true\r\n    },\r\n    onDelete(id) {\r\n      this.$confirm({\r\n        title: 'Do you want to delete this goals?',\r\n        content: 'Cannot be restored after deletion',\r\n        onOk: () => {\r\n          this.delLoading = true\r\n          this.delId = id\r\n          savingGoals_delete({id}).then(() => {\r\n            this.$message.success('Deleting savinggoals for success！')\r\n            this.getDataList()\r\n          }).finally(() => {\r\n            this.delLoading = false\r\n          })\r\n        },\r\n        onCancel() { },\r\n      })\r\n    },\r\n    addCurrentAmount() {\r\n      this.form.validateFields((err, values) => {\r\n        if (!err) {\r\n          const _data = this.goalsList[this.currentAmountIndex]\r\n          const params = {\r\n            ..._data,\r\n            currentAmount: parseFloat(_data.currentAmount) + parseFloat(values.currentAmount)\r\n          }\r\n          savingGoals_edit(params)\r\n            .then(() => {\r\n              this.$message.success('Add amount success！')\r\n              this.getDataList()\r\n              this.visible = false\r\n              this.form.resetFields()\r\n              let date = new Date();\r\n              let day = date.getDate();\r\n              let month = date.getMonth() + 1;\r\n              let year = date.getFullYear();\r\n              let ukFormat = `${day}/${month}/${year}`;\r\n              transaction_add({\r\n                date: ukFormat,\r\n                type: _data.type,\r\n                name: _data.goalName,\r\n                amount: parseFloat(values.currentAmount),\r\n                groupId: _data.groupId,\r\n                transactionType: 2,\r\n                goalId: _data.id\r\n              })\r\n            }).finally(() => {\r\n            })\r\n        }\r\n      })\r\n    },\r\n    onClose() {\r\n      this.visible = false\r\n      this.form.resetFields()\r\n    }\r\n  },\r\n  mounted() {\r\n    this.getGroupData()\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.cardBox {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-evenly;\r\n  height: 100%;\r\n\r\n  .ant-card {\r\n    margin: 20px;\r\n    display: flex;\r\n    flex-flow: column;\r\n    width: 350px;\r\n    height: 350px;\r\n    color: #000;\r\n    font-size: 20px;\r\n    box-shadow: 0 0 10px #ccc;\r\n\r\n    :deep(.ant-card-body) {\r\n      padding: 20px 20px;\r\n\r\n      .card_header {\r\n        display: flex;\r\n\r\n        span {\r\n          flex: 1;\r\n          text-align: center;\r\n\r\n        }\r\n\r\n        i {\r\n          line-height: 35px;\r\n\r\n        }\r\n      }\r\n\r\n      .card_date {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-evenly;\r\n\r\n        .money_date {\r\n          display: flex;\r\n          justify-content: space-evenly;\r\n          width: 100%;\r\n\r\n          div {\r\n            margin: 40px 0;\r\n            width: 140px;\r\n            height: 100px;\r\n            text-align: center;\r\n            line-height: 100px;\r\n            box-shadow: 0 0 5px #000;\r\n          }\r\n        }\r\n      }\r\n\r\n      .card_btn {\r\n        margin-top: 30px;\r\n        display: flex;\r\n        justify-content: space-around;\r\n\r\n        button {\r\n          width: 80px;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}