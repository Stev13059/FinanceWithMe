{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { groups_list, groups_userList, groups_disband, groups_addUser, groups_add, groups_exit } from '@/api/api';\nconst columns = [{\n  title: 'Num',\n  dataIndex: '_num',\n  align: 'center',\n  width: 180\n}, {\n  title: 'Group Name',\n  dataIndex: 'groupName',\n  align: 'center'\n}, {\n  title: 'Date',\n  dataIndex: 'createTime',\n  align: 'center'\n}, {\n  title: 'Operation',\n  align: 'center',\n  width: 400,\n  scopedSlots: {\n    customRender: 'Operation'\n  }\n}];\nexport default {\n  name: 'GroupsPage',\n  data() {\n    return {\n      loading: false,\n      addLoading: false,\n      joinLoading: false,\n      userLoading: false,\n      resData: [],\n      data: [],\n      columns,\n      visibleAdd: false,\n      formAdd: this.$form.createForm(this, {\n        name: 'coordinated'\n      }),\n      formJoin: this.$form.createForm(this, {\n        name: 'coordinated'\n      }),\n      visibleView: false,\n      visibleJoin: false,\n      visibleUsers: false,\n      searchParams: '',\n      pagination: {\n        total: 0,\n        current: 1,\n        pageSize: 10,\n        pageSizeOptions: ['10', '20', '30', '50'],\n        showTotal: total => `total ${total}`,\n        showSizeChanger: true,\n        onChange: this.change\n      },\n      selectGroup: {},\n      groupUsers: []\n    };\n  },\n  mounted() {\n    this.getBaseList();\n  },\n  methods: {\n    onInput() {\n      if (!this.searchParams) {\n        this.getBaseList();\n      }\n    },\n    change(page) {\n      this.pagination.current = page;\n      console.log(111);\n    },\n    getBaseList() {\n      this.loading = true;\n      groups_list().then(res => {\n        this.data = res.data.map((m, mi) => {\n          const date = new Date(m.createTime);\n          const day = date.getDate();\n          const month = date.getMonth() + 1;\n          const year = date.getFullYear();\n          return {\n            ...m,\n            _num: mi + 1,\n            createTime: `${day}/${month}/${year}`\n          };\n        });\n        this.resData = [...this.data];\n        this.pagination.total = res.data.length;\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n    changePage(page) {\n      Object.assign(this.pagination, page);\n    },\n    disbandGroup(id) {\n      this.$confirm({\n        title: 'Do you want to delete this group?',\n        content: 'Cannot be restored after deletion',\n        onOk: () => {\n          groups_disband({\n            id\n          }).then(() => {\n            this.$message.success('Deleting group for success！');\n            this.getBaseList();\n          }).finally(() => {});\n        },\n        onCancel() {}\n      });\n    },\n    exitGroup(id) {\n      this.$confirm({\n        title: 'Do you want to exit this group?',\n        content: 'Cannot be restored after exiting',\n        onOk: () => {\n          groups_exit({\n            id\n          }).then(() => {\n            this.$message.success('Exit success！');\n            this.getBaseList();\n          }).finally(() => {});\n        },\n        onCancel() {}\n      });\n    },\n    onConfirmAdd() {\n      this.formAdd.validateFields((err, values) => {\n        if (!err) {\n          this.addLoading = true;\n          groups_add(values).then(() => {\n            this.$message.success('Added group successfully');\n            this.visibleAdd = false;\n            this.getBaseList();\n          }).finally(() => {\n            this.addLoading = false;\n          });\n        }\n      });\n    },\n    onClose() {\n      this.formAdd.resetFields();\n      this.visibleAdd = false;\n    },\n    inviteUser(text) {\n      this.selectGroup = text;\n      this.visibleView = true;\n    },\n    showUsers(text) {\n      this.userLoading = true;\n      this.selectGroup = text;\n      groups_userList({\n        groupId: text.id\n      }).then(res => {\n        this.groupUsers = res.data;\n        this.visibleUsers = true;\n      }).finally(() => {\n        this.userLoading = false;\n      });\n    },\n    onConfirmSelect() {\n      this.formJoin.validateFields((err, values) => {\n        if (!err) {\n          this.joinLoading = true;\n          groups_addUser({\n            id: values.id\n          }).then(() => {\n            this.$message.success('Join Success');\n            this.visibleJoin = false;\n            this.formJoin.resetFields();\n            this.getBaseList();\n          }).finally(() => {\n            this.joinLoading = false;\n          });\n        }\n      });\n    },\n    searchGroup() {\n      this.data = this.resData.filter(item => item.groupName.indexOf(this.searchParams) > -1);\n      this.pagination.total = this.data.length;\n    },\n    copyText(text) {\n      if (!text) {\n        alert('Group Id does not exist');\n        return;\n      }\n      // Create a temporary textarea element\n      const textarea = document.createElement('textarea');\n      textarea.value = text;\n      document.body.appendChild(textarea);\n      textarea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textarea);\n      this.$message.success('Group Id copied');\n    }\n  }\n};","map":{"version":3,"names":["groups_list","groups_userList","groups_disband","groups_addUser","groups_add","groups_exit","columns","title","dataIndex","align","width","scopedSlots","customRender","name","data","loading","addLoading","joinLoading","userLoading","resData","visibleAdd","formAdd","$form","createForm","formJoin","visibleView","visibleJoin","visibleUsers","searchParams","pagination","total","current","pageSize","pageSizeOptions","showTotal","showSizeChanger","onChange","change","selectGroup","groupUsers","mounted","getBaseList","methods","onInput","page","console","log","then","res","map","m","mi","date","Date","createTime","day","getDate","month","getMonth","year","getFullYear","_num","length","finally","changePage","Object","assign","disbandGroup","id","$confirm","content","onOk","$message","success","onCancel","exitGroup","onConfirmAdd","validateFields","err","values","onClose","resetFields","inviteUser","text","showUsers","groupId","onConfirmSelect","searchGroup","filter","item","groupName","indexOf","copyText","alert","textarea","document","createElement","value","body","appendChild","select","execCommand","removeChild"],"sources":["src/views/groups/index.vue"],"sourcesContent":["<template>\r\n  <div class=\"groups\">\r\n    <div class=\"groups_top\">\r\n      <div class=\"topLeft\">\r\n        <a-form :label-col=\"{ span: 8 }\" :wrapper-col=\"{ span: 15 }\">\r\n          <a-form-item label=\"Group Name : \">\r\n            <a-input v-model=\"searchParams\" allowClear @input=\"onInput\"></a-input>\r\n          </a-form-item>\r\n        </a-form>\r\n        <a-button style=\"margin-Top:5px\" @click=\"searchGroup\">Search</a-button>\r\n      </div>\r\n      <a-button type=\"primary\" style=\"margin-top:5px;width:85px\" @click=\"visibleAdd = true\">Create</a-button>\r\n      <a-button type=\"default\" style=\"margin-top:5px;width:85px;margin-left: 10px\"\r\n        @click=\"visibleJoin = true\">Join</a-button>\r\n    </div>\r\n    <a-table :loading=\"loading\" bordered :columns=\"columns\" :data-source=\"data\" :pagination=pagination :rowKey=\"(item, index) => index\">\r\n      <div slot=\"Operation\" slot-scope=\"text\" style=\"display: flex;justify-content: space-around;\">\r\n        <a-button type=\"danger\" @click=\"disbandGroup(text.id)\">Disband</a-button>\r\n        <a-button type=\"danger\"  @click=\"exitGroup(text.id)\">Exit</a-button>\r\n        <a-button @click=\"inviteUser(text)\">Invite</a-button>\r\n        <a-button :loading=\"userLoading && selectGroup.id == text.id\" @click=\"showUsers(text)\">Users</a-button>\r\n      </div>\r\n    </a-table>\r\n\r\n    <a-modal title=\"Create a group\" v-model=\"visibleAdd\" @ok=\"onConfirmAdd\" @cancel=\"onClose\" :confirmLoading=\"addLoading\">\r\n      <a-form :form='formAdd' :label-col=\"{ span: 6 }\" :wrapper-col=\"{ span: 12 }\">\r\n        <a-form-item label=\"Group Name\">\r\n          <a-input placeholder=\"Please enter group name!\"\r\n            v-decorator=\"['groupName', { rules: [{ required: true, message: 'Please input groupName!' }] }]\" />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <a-modal title=\"Join Group\" v-model=\"visibleJoin\" @ok=\"onConfirmSelect\" @cancel=\"formJoin.resetFields()\" :confirmLoading=\"joinLoading\">\r\n      <a-form :form='formJoin' :label-col=\"{ span: 4 }\" :wrapper-col=\"{ span: 18 }\">\r\n        <a-form-item label=\"Group Id\">\r\n          <a-input placeholder=\"Please enter group id!\"\r\n            v-decorator=\"['id', { rules: [{ required: true, message: 'Please input groupId!' }] }]\" />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <a-modal title=\"View Group Id\" v-model=\"visibleView\" :footer=\"false\">\r\n      <span>The group ID is <b style=\"cursor: pointer; color: #1890ff;\" @click=\"copyText(selectGroup.id)\">{{ selectGroup.id }}</b></span>\r\n    </a-modal>\r\n\r\n    <a-modal title=\"Group Users\" v-model=\"visibleUsers\" :footer=\"false\">\r\n      <span>users: {{ groupUsers.join(',') }} </span>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { groups_list, groups_userList, groups_disband, groups_addUser, groups_add, groups_exit } from '@/api/api'\r\nconst columns = [\r\n  {\r\n    title: 'Num',\r\n    dataIndex: '_num',\r\n    align: 'center',\r\n    width: 180\r\n  },\r\n  {\r\n    title: 'Group Name',\r\n    dataIndex: 'groupName',\r\n    align: 'center',\r\n  },\r\n  {\r\n    title: 'Date',\r\n    dataIndex: 'createTime',\r\n    align: 'center'\r\n\r\n  },\r\n  {\r\n    title: 'Operation',\r\n    align: 'center',\r\n    width: 400,\r\n    scopedSlots: { customRender: 'Operation' },\r\n  },\r\n];\r\nexport default {\r\n  name: 'GroupsPage',\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      addLoading: false,\r\n      joinLoading: false,\r\n      userLoading: false,\r\n      resData: [],\r\n      data: [],\r\n      columns,\r\n      visibleAdd: false,\r\n      formAdd: this.$form.createForm(this, { name: 'coordinated' }),\r\n      formJoin: this.$form.createForm(this, { name: 'coordinated' }),\r\n      visibleView: false,\r\n      visibleJoin: false,\r\n      visibleUsers: false,\r\n      searchParams: '',\r\n      pagination: {\r\n        total: 0,\r\n        current: 1,\r\n        pageSize: 10,\r\n        pageSizeOptions: ['10', '20', '30', '50'],\r\n        showTotal: total => `total ${total}`,\r\n        showSizeChanger: true,\r\n        onChange: this.change\r\n      },\r\n      selectGroup: {},\r\n      groupUsers: []\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getBaseList()\r\n  },\r\n  methods: {\r\n    onInput() {\r\n      if (!this.searchParams) {\r\n        this.getBaseList()\r\n      }\r\n    },\r\n    change(page) {\r\n      this.pagination.current = page\r\n      console.log(111);\r\n\r\n    },\r\n    getBaseList() {\r\n      this.loading = true\r\n      groups_list().then((res) => {\r\n        this.data = res.data.map((m, mi) => {\r\n          const date = new Date(m.createTime);\r\n          const day = date.getDate();\r\n          const month = date.getMonth() + 1;\r\n          const year = date.getFullYear();\r\n          return {\r\n            ...m,\r\n            _num: mi + 1,\r\n            createTime: `${day}/${month}/${year}`\r\n          }\r\n        })\r\n        this.resData = [...this.data]\r\n        this.pagination.total = res.data.length\r\n      }).finally(() => {\r\n        this.loading = false\r\n      })\r\n    },\r\n    changePage(page) {\r\n      Object.assign(this.pagination, page)\r\n    },\r\n    disbandGroup(id) {\r\n      this.$confirm({\r\n        title: 'Do you want to delete this group?',\r\n        content: 'Cannot be restored after deletion',\r\n        onOk: () => {\r\n          groups_disband({id}).then(() => {\r\n            this.$message.success('Deleting group for success！')\r\n            this.getBaseList()\r\n          }).finally(() => {\r\n          })\r\n        },\r\n        onCancel() { },\r\n      })\r\n    },\r\n    exitGroup(id) {\r\n      this.$confirm({\r\n        title: 'Do you want to exit this group?',\r\n        content: 'Cannot be restored after exiting',\r\n        onOk: () => {\r\n          groups_exit({id}).then(() => {\r\n            this.$message.success('Exit success！')\r\n            this.getBaseList()\r\n          }).finally(() => {\r\n          })\r\n        },\r\n        onCancel() { },\r\n      })\r\n    },\r\n    onConfirmAdd() {\r\n      this.formAdd.validateFields((err, values) => {\r\n        if (!err) {\r\n          this.addLoading = true\r\n          groups_add(values).then(() => {\r\n            this.$message.success('Added group successfully')\r\n            this.visibleAdd = false\r\n            this.getBaseList()\r\n          }).finally(() => {\r\n            this.addLoading = false\r\n          })\r\n        }\r\n      });\r\n    },\r\n    onClose() {\r\n      this.formAdd.resetFields()\r\n      this.visibleAdd = false\r\n    },\r\n    inviteUser(text) {\r\n      this.selectGroup = text\r\n      this.visibleView = true\r\n    },\r\n    showUsers(text) {\r\n      this.userLoading = true\r\n      this.selectGroup = text\r\n      groups_userList({ groupId: text.id }).then(res => {\r\n        this.groupUsers = res.data\r\n        this.visibleUsers = true\r\n      }).finally(() => {\r\n        this.userLoading = false\r\n      })\r\n    },\r\n    onConfirmSelect() {\r\n      this.formJoin.validateFields((err, values) => {\r\n        if (!err) {\r\n        this.joinLoading = true\r\n          groups_addUser({ id: values.id }).then(() => {\r\n            this.$message.success('Join Success')\r\n            this.visibleJoin = false\r\n            this.formJoin.resetFields()\r\n            this.getBaseList()\r\n          }).finally(() => {\r\n            this.joinLoading = false\r\n          })\r\n        }\r\n      })\r\n    },\r\n    searchGroup() {\r\n      this.data = this.resData.filter(item => item.groupName.indexOf(this.searchParams) > -1)\r\n      this.pagination.total = this.data.length\r\n    },\r\n    copyText(text) {\r\n      if (!text) {\r\n        alert('Group Id does not exist');\r\n        return;\r\n      }\r\n      // Create a temporary textarea element\r\n      const textarea = document.createElement('textarea');\r\n      textarea.value = text;\r\n      document.body.appendChild(textarea);\r\n      textarea.select();\r\n      document.execCommand('copy');\r\n      document.body.removeChild(textarea);\r\n      this.$message.success('Group Id copied')\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.groups {\r\n  padding: 50px;\r\n\r\n  button {\r\n    width: 84px;\r\n  }\r\n\r\n  .groups_top {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n\r\n    .topLeft {\r\n      flex: 1;\r\n      display: flex;\r\n\r\n      .ant-form {\r\n        width: 400px;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  :deep(.ant-table-thead) {\r\n    tr {\r\n      th {\r\n        background-color: #e8e8e8;\r\n        border-right: 1px solid #f7f6f6\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}