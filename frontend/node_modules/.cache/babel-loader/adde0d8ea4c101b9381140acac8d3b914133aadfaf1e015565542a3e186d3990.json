{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport Summary from './components/Summary.vue';\nimport Modal from './components/Modal.vue';\nimport { transaction_list, transaction_delete, groups_list } from '@/api/api';\nconst columns1 = [{\n  title: 'Details',\n  dataIndex: 'name',\n  align: 'center'\n}, {\n  title: 'Amount(£)',\n  dataIndex: 'amount',\n  align: 'center'\n}, {\n  title: 'Date',\n  dataIndex: 'date',\n  align: 'center'\n}, {\n  title: 'Operation',\n  scopedSlots: {\n    customRender: 'Operation'\n  },\n  align: 'center'\n}];\nconst columns2 = [{\n  title: 'Type',\n  dataIndex: 'type',\n  align: 'center'\n}, {\n  title: 'Details',\n  dataIndex: 'name',\n  align: 'center'\n}, {\n  title: 'Amount(£)',\n  dataIndex: 'amount',\n  align: 'center'\n}, {\n  title: 'Date',\n  dataIndex: 'date',\n  align: 'center'\n}, {\n  title: 'Operation',\n  scopedSlots: {\n    customRender: 'Operation'\n  },\n  align: 'center'\n}];\nexport default {\n  name: 'TransactionsPage',\n  data() {\n    return {\n      loading: false,\n      delLoading: false,\n      columns: columns1,\n      data: [],\n      balance: 0,\n      incomes: 0,\n      expenses: 0,\n      pagination: {\n        total: 0,\n        current: 1,\n        pageSizeOptions: ['10', '20', '30', '50'],\n        showTotal: total => `total ${total}`,\n        pageSize: 10,\n        showSizeChanger: true\n      },\n      tabGroupData: [],\n      tabTypeData: [{\n        id: 1,\n        name: 'Income',\n        selected: true\n      }, {\n        id: 2,\n        name: 'Expense',\n        selected: false\n      }]\n    };\n  },\n  components: {\n    Summary,\n    Modal\n  },\n  methods: {\n    getGroupData() {\n      groups_list().then(res => {\n        this.tabGroupData = [{\n          id: '',\n          name: 'Personal',\n          selected: true\n        }, ...res.data.map(m => ({\n          id: m.id,\n          name: m.groupName,\n          selected: false\n        }))];\n        this.getData();\n      });\n    },\n    changeGroup(item) {\n      this.tabGroupData.forEach(el => {\n        el.selected = item.id === el.id;\n      });\n      this.getData();\n    },\n    changeType(item) {\n      this.tabTypeData.forEach(el => {\n        el.selected = item.id === el.id;\n      });\n      this.columns = item.id === 1 ? columns1 : columns2;\n      this.getData();\n    },\n    changePage(page) {\n      Object.assign(this.pagination, page);\n    },\n    modalAdddata() {\n      this.$refs.Modal.visible = true;\n      this.$refs.Modal.form.resetFields();\n      this.$refs.Modal.formData = {\n        groupId: this.tabGroupData.find(f => f.selected).id,\n        transactionType: this.tabTypeData.find(f => f.selected).id\n      };\n      console.log(this.$refs.Modal.formData);\n    },\n    getData() {\n      this.loading = true;\n      const params = {};\n      const gId = this.tabGroupData.find(f => f.selected).id;\n      if (gId) {\n        params.groupId = gId;\n      }\n      transaction_list(params).then(res => {\n        this.balance = res.balance;\n        this.incomes = res.incomes;\n        this.expenses = res.expenses;\n        const resData = res.data.infos;\n        this.data = resData.filter(f => f.transactionType == this.tabTypeData.find(f => f.selected).id);\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n    onEdit(text) {\n      this.$refs.Modal.visible = true;\n      Object.assign(this.$refs.Modal.formData, {\n        ...text\n      });\n      this.$nextTick(() => {\n        this.$refs.Modal.form.setFieldsValue(this.$refs.Modal.formData);\n      });\n    },\n    deleteDate(text) {\n      this.delLoading = true;\n      transaction_delete({\n        'id': text.id\n      }).then(() => {\n        this.$message.success('Deleted successfully');\n        this.getData();\n      }).finally(() => {\n        this.delLoading = false;\n      });\n    }\n  },\n  mounted() {\n    this.getGroupData();\n  }\n};","map":{"version":3,"names":["Summary","Modal","transaction_list","transaction_delete","groups_list","columns1","title","dataIndex","align","scopedSlots","customRender","columns2","name","data","loading","delLoading","columns","balance","incomes","expenses","pagination","total","current","pageSizeOptions","showTotal","pageSize","showSizeChanger","tabGroupData","tabTypeData","id","selected","components","methods","getGroupData","then","res","map","m","groupName","getData","changeGroup","item","forEach","el","changeType","changePage","page","Object","assign","modalAdddata","$refs","visible","form","resetFields","formData","groupId","find","f","transactionType","console","log","params","gId","resData","infos","filter","finally","onEdit","text","$nextTick","setFieldsValue","deleteDate","$message","success","mounted"],"sources":["src/views/transactions/index.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <TabBtn :tabData=\"tabGroupData\" @changeTab=\"changeGroup\"></TabBtn>\r\n    <Summary :balance=\"balance\" :incomes=\"incomes\" :expenses=\"expenses\"></Summary>\r\n    <div class=\"editBtn\">\r\n      <div class=\"left\">\r\n        <TabBtn :tabData=\"tabTypeData\" @changeTab=\"changeType\"></TabBtn>\r\n      </div>\r\n      <a-button v-if=\"!tabGroupData.find(f => f.selected).id\" type=\"primary\" size=\"large\" style=\"width:90px\" @click=\"modalAdddata\">\r\n        Add\r\n      </a-button>\r\n    </div>\r\n    <a-table :loading=\"loading\" :data-source=\"data\" :columns=\"columns\" :rowKey=\"(item, index) => index\" :pagination=\"pagination\"\r\n      @change=changePage>\r\n      <span slot=\"Operation\" slot-scope=\"text,records,index\">\r\n        <a-popconfirm title=\"Are you sure delete this data?\" @confirm=\"deleteDate(text)\">\r\n          <a-button :disabled=\"tabGroupData.find(f => f.selected).id || text.goalId != ''\" type=danger style=\"margin-right:10px;\" :loading=\"delLoading\">Delete</a-button>\r\n        </a-popconfirm>\r\n        <a-button :disabled=\"tabGroupData.find(f => f.selected).id || text.goalId != '' \" style=\"margin-right:10px;\" @click=\"onEdit(text)\">Edit</a-button>\r\n      </span>\r\n    </a-table>\r\n\r\n    <Modal ref=\"Modal\" @submitOK=\"getData\"></Modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Summary from './components/Summary.vue'\r\nimport Modal from './components/Modal.vue'\r\nimport { transaction_list, transaction_delete, groups_list } from '@/api/api'\r\nconst columns1 = [\r\n  {\r\n    title: 'Details',\r\n    dataIndex: 'name',\r\n    align: 'center',\r\n  },\r\n  {\r\n    title: 'Amount(£)',\r\n    dataIndex: 'amount',\r\n    align: 'center',\r\n  },\r\n  {\r\n    title: 'Date',\r\n    dataIndex: 'date',\r\n    align: 'center',\r\n  },\r\n  {\r\n    title: 'Operation',\r\n    scopedSlots: { customRender: 'Operation' },\r\n    align: 'center',\r\n  },\r\n];\r\nconst columns2 = [\r\n  {\r\n    title: 'Type',\r\n    dataIndex: 'type',\r\n    align: 'center',\r\n  },\r\n  {\r\n    title: 'Details',\r\n    dataIndex: 'name',\r\n    align: 'center',\r\n  },\r\n  {\r\n    title: 'Amount(£)',\r\n    dataIndex: 'amount',\r\n    align: 'center',\r\n  },\r\n  {\r\n    title: 'Date',\r\n    dataIndex: 'date',\r\n    align: 'center',\r\n  },\r\n  {\r\n    title: 'Operation',\r\n    scopedSlots: { customRender: 'Operation' },\r\n    align: 'center',\r\n  },\r\n];\r\nexport default {\r\n  name: 'TransactionsPage',\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      delLoading: false,\r\n      columns: columns1,\r\n      data: [],\r\n      balance: 0,\r\n      incomes: 0,\r\n      expenses: 0,\r\n      pagination: {\r\n        total: 0,\r\n        current: 1,\r\n        pageSizeOptions: ['10', '20', '30', '50'],\r\n        showTotal: total => `total ${total}`,\r\n        pageSize: 10,\r\n        showSizeChanger: true\r\n      },\r\n      tabGroupData: [],\r\n      tabTypeData: [\r\n        {\r\n          id: 1,\r\n          name: 'Income',\r\n          selected: true\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Expense',\r\n          selected: false\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  components: { Summary, Modal },\r\n  methods: {\r\n    getGroupData() {\r\n      groups_list().then((res) => {\r\n        this.tabGroupData = [\r\n          {\r\n            id: '',\r\n            name: 'Personal',\r\n            selected: true\r\n          },\r\n          ...res.data.map(m => ({\r\n            id: m.id,\r\n            name: m.groupName,\r\n            selected: false\r\n          }))\r\n        ]\r\n        this.getData()\r\n      })\r\n    },\r\n    changeGroup(item) {\r\n      this.tabGroupData.forEach(el => {\r\n        el.selected = item.id === el.id\r\n      })\r\n      this.getData()\r\n    },\r\n    changeType(item) {\r\n      this.tabTypeData.forEach(el => {\r\n        el.selected = item.id === el.id\r\n      })\r\n      this.columns = item.id === 1 ? columns1 : columns2\r\n      this.getData()\r\n    },\r\n    changePage(page) {\r\n      Object.assign(this.pagination, page)\r\n    },\r\n    modalAdddata() {\r\n      this.$refs.Modal.visible = true\r\n      this.$refs.Modal.form.resetFields()\r\n      this.$refs.Modal.formData = {\r\n        groupId: this.tabGroupData.find(f => f.selected).id,\r\n        transactionType: this.tabTypeData.find(f => f.selected).id\r\n      }\r\n      console.log(this.$refs.Modal.formData);\r\n      \r\n    },\r\n    getData() {\r\n      this.loading = true\r\n      const params = {}\r\n      const gId = this.tabGroupData.find(f => f.selected).id\r\n      if (gId) {\r\n        params.groupId = gId\r\n      }\r\n      transaction_list(params).then((res) => {\r\n        this.balance = res.balance\r\n        this.incomes = res.incomes\r\n        this.expenses = res.expenses\r\n        const resData = res.data.infos\r\n        this.data = resData.filter(f => f.transactionType == this.tabTypeData.find(f => f.selected).id)\r\n      }).finally(() => {\r\n        this.loading = false\r\n      })\r\n    },\r\n    onEdit(text) {\r\n      this.$refs.Modal.visible = true\r\n      Object.assign(this.$refs.Modal.formData, {...text})\r\n      this.$nextTick(() => {\r\n        this.$refs.Modal.form.setFieldsValue(this.$refs.Modal.formData)\r\n      })\r\n    },\r\n    deleteDate(text) {\r\n      this.delLoading = true\r\n      transaction_delete({ 'id': text.id }).then(() => {\r\n        this.$message.success('Deleted successfully');\r\n        this.getData()\r\n      }).finally(() => {\r\n        this.delLoading = false\r\n      })\r\n    }\r\n  },\r\n  mounted() {\r\n    this.getGroupData()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.editBtn {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  transition: all .5;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}